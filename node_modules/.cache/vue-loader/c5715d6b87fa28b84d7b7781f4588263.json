{"remainingRequest":"/Users/juanfelipelara/Documents/Platzi/Vue JS/Basico/platzi-exchange/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/juanfelipelara/Documents/Platzi/Vue JS/Basico/platzi-exchange/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/juanfelipelara/Documents/Platzi/Vue JS/Basico/platzi-exchange/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/juanfelipelara/Documents/Platzi/Vue JS/Basico/platzi-exchange/src/views/CoinDetail.vue?vue&type=template&id=613d02fc&","dependencies":[{"path":"/Users/juanfelipelara/Documents/Platzi/Vue JS/Basico/platzi-exchange/src/views/CoinDetail.vue","mtime":1589777553246},{"path":"/Users/juanfelipelara/Documents/Platzi/Vue JS/Basico/platzi-exchange/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/juanfelipelara/Documents/Platzi/Vue JS/Basico/platzi-exchange/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/juanfelipelara/Documents/Platzi/Vue JS/Basico/platzi-exchange/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/juanfelipelara/Documents/Platzi/Vue JS/Basico/platzi-exchange/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}